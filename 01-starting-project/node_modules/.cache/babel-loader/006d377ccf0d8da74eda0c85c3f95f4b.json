{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stlp\\\\Desktop\\\\Frontend Tutorials\\\\01-starting-project\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button'; // function for the useReducer Hook. it is ok to define it out side the component\n// because it will take every thing it needs as arguments\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReduser = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  } // state = the most recent state\n\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReduser = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.trim().length > 6\n    };\n  } // state = the most recent state\n\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  //const [enteredEmail, setEnteredEmail] = useState('');\n  //const [emailIsValid, setEmailIsValid] = useState();\n  // instead of two states we will use 'useReducer' to manage only one start for email value and is valid\n  const [emailState, dispatchEmail] = useReducer(emailReduser, {\n    value: '',\n    isValid: null\n  }); //const [enteredPassword, setEnteredPassword] = useState('');\n  //const [passwordIsValid, setPasswordIsValid] = useState();\n\n  const [passwordState, dispatchPassword] = useReducer(emailReduser, {\n    value: '',\n    isValid: null\n  });\n  const [formIsValid, setFormIsValid] = useState(false); // check valid email/psw only if enteredEmail, or enteredPassword have changed\n  // without the timer the useEffect will run every time the user enter new letter; \n  // we want to run it when the user stop typing for 500 ms\n\n  useEffect(() => {\n    const timerID = setTimeout(() => {\n      console.log('check email/psw');\n      setFormIsValid(emailState.value.includes('@') && enteredPassword.trim().length > 6);\n    }, 500); // return a CLEAN-UP function: this function will run before runing the useEffect, but not the first time \n    // as the user is typing we clear the last timer and set an new one. if the user stop for 500 ms => run 'setFormIsValid'\n\n    return () => {\n      console.log(\"Clear timer\");\n      clearTimeout(timerID);\n    };\n  }, [emailState.value, enteredPassword]);\n\n  const emailChangeHandler = event => {\n    //setEnteredEmail(event.target.value);\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n    setFormIsValid(event.target.value.includes('@') && passwordState.isValid);\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  }; // this is not a good way of setting emailIsValid. we should n't set a state based on other state\n  // recat don't update state immediately so we might use the old value to update the other state\n\n\n  const validateEmailHandler = () => {\n    //setEmailIsValid(emailState.isValid);\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"c0ZUxJhTjoAju2SiAxBTGaIWjro=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/stlp/Desktop/Frontend Tutorials/01-starting-project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReduser","state","action","type","value","val","isValid","includes","passwordReduser","trim","length","Login","props","emailState","dispatchEmail","passwordState","dispatchPassword","formIsValid","setFormIsValid","timerID","setTimeout","console","log","enteredPassword","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n\n// function for the useReducer Hook. it is ok to define it out side the component\n// because it will take every thing it needs as arguments\nconst emailReduser = (state, action) => {\n  if(action.type === 'USER_INPUT') {\n    return {value: action.val, isValid: action.val.includes('@')};\n  }\n  // state = the most recent state\n  if(action.type === 'INPUT_BLUR') {\n    return {value: state.value, isValid: state.value.includes('@')};\n  }\n  return {value: '', isValid: false};\n};\n\nconst passwordReduser = (state, action) => {\n  if(action.type === 'USER_INPUT') {\n    return {value: action.val, isValid: action.trim().length > 6};\n  }\n  // state = the most recent state\n  if(action.type === 'INPUT_BLUR') {\n    return {value: state.value, isValid: state.value.trim().length > 6};\n  }\n  return {value: '', isValid: false};\n}\n\nconst Login = (props) => {\n  //const [enteredEmail, setEnteredEmail] = useState('');\n  //const [emailIsValid, setEmailIsValid] = useState();\n  // instead of two states we will use 'useReducer' to manage only one start for email value and is valid\n  const [emailState, dispatchEmail] = useReducer(emailReduser, {value: '', isValid: null});\n\n  //const [enteredPassword, setEnteredPassword] = useState('');\n  //const [passwordIsValid, setPasswordIsValid] = useState();\n  const [passwordState, dispatchPassword] = useReducer(emailReduser, {value: '', isValid: null});\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  \n\n  // check valid email/psw only if enteredEmail, or enteredPassword have changed\n  // without the timer the useEffect will run every time the user enter new letter; \n  // we want to run it when the user stop typing for 500 ms\n  useEffect(() => {\n    const timerID = setTimeout(() => { \n      console.log('check email/psw');\n      setFormIsValid(\n        emailState.value.includes('@') && enteredPassword.trim().length > 6\n      );\n    }, 500);\n\n    // return a CLEAN-UP function: this function will run before runing the useEffect, but not the first time \n    // as the user is typing we clear the last timer and set an new one. if the user stop for 500 ms => run 'setFormIsValid'\n    return () => {\n      console.log(\"Clear timer\")\n      clearTimeout(timerID);\n    };\n  }, [emailState.value, enteredPassword]);\n\n  const emailChangeHandler = (event) => {\n    //setEnteredEmail(event.target.value);\n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n    setFormIsValid(event.target.value.includes('@') && passwordState.isValid);\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({type: 'USER_INPUT', val: event.target.value});\n\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  // this is not a good way of setting emailIsValid. we should n't set a state based on other state\n  // recat don't update state immediately so we might use the old value to update the other state\n  const validateEmailHandler = () => {\n    //setEmailIsValid(emailState.isValid);\n    dispatchEmail({type: 'INPUT_BLUR'});\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({type: 'INPUT_BLUR'})\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}