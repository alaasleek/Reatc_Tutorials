{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stlp\\\\Desktop\\\\Frontend Tutorials\\\\01-starting-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContex from './store/auth-contex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // state will be refreshed when refreshing the bage => loging info will be lost\n  // we need to check if there was a user logged in before\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true);\n    }\n  }, [] // [] => if logged in before run useEffect only once \n  );\n\n  const loginHandler = (email, password) => {\n    // We should of course check the DB for valid email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1'); // stor isLoggedIn = 1 in local storage\n\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return (\n    /*#__PURE__*/\n    // all components wrapped with this contex and their children also\n    // will have acces to what is stored in it \n    _jsxDEV(AuthContex.Provider, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n        isAuthenticated: isLoggedIn,\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: loginHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 27\n        }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n          onLogout: logoutHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  );\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/stlp/Desktop/Frontend Tutorials/01-starting-project/src/App.js"],"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContex","App","isLoggedIn","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACb,UAAMQ,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;AAEA,QAAGF,6BAA6B,KAAK,GAArC,EAA0C;AACxCD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACC;AACJ,GANQ,EAMN,EANM,CAMH;AANG,GAAT;;AASA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC,EAHwC,CAGC;;AACzCP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GALD;;AAOA,QAAMQ,aAAa,GAAG,MAAM;AAC1BN,IAAAA,YAAY,CAACO,UAAb,CAAwB,YAAxB;AACAT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKA;AAAA;AACM;AACA;AACF,YAAC,UAAD,CAAY,QAAZ;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,eAAe,EAAED,UAA7B;AAAyC,QAAA,QAAQ,EAAES;AAAnD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBACG,CAACT,UAAD,iBAAe,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEK;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADlB,EAEGL,UAAU,iBAAI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAES;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ;AAWD;;GAtCQV,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContex from './store/auth-contex';\n\nfunction App() {\n\n  // state will be refreshed when refreshing the bage => loging info will be lost\n  // we need to check if there was a user logged in before\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() =>{\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n    if(storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true);\n      }\n  }, [] // [] => if logged in before run useEffect only once \n  );\n\n  const loginHandler = (email, password) => {\n    // We should of course check the DB for valid email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1'); // stor isLoggedIn = 1 in local storage\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return (\n        // all components wrapped with this contex and their children also\n        // will have acces to what is stored in it \n      <AuthContex.Provider>\n        <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n        <main>\n          {!isLoggedIn && <Login onLogin={loginHandler} />}\n          {isLoggedIn && <Home onLogout={logoutHandler} />}\n        </main>\n      </AuthContex.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}