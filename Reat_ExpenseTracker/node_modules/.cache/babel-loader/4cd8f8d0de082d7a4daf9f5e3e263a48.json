{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stlp\\\\Desktop\\\\Frontend Tutorials\\\\Reat_ExpenseTracker\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css'; // the props here are the funtion that will allow us to pass data up to NewExpense\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  // we need tree states to record the user input of title, amout, and date\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  /*\r\n  // we can also have all three inputs as one state with three values\r\n  const [userInput, setUserInput] = useState(\r\n      {\r\n          enteredTitle: '',\r\n          enteredAmount: '',\r\n          enteredDate: '',\r\n      }\r\n  );\r\n  */\n  // we also need three hadlers for the tree states we have\n  // sice this handler will be called from the onChange, then onChange will make sure to pass in the event\n  // the event will have the value of input the user will enter(event.target.value).\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value); // this if we decide to have three separate states \n\n    /*\r\n    // in case yoy are combining the three inputs in one state\r\n    setUserInput({\r\n        ...userInput, // first we copy the old state to make sure the amount and date are not lost\r\n        enteredTitle: event.target.value\r\n    });\r\n      // a better way of doing this\r\n    setUserInput((prevState) => {\r\n        return {...prevState, enteredTitle: event.target.value};\r\n    });\r\n    */\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  }; // to handle when the user submit the form\n  // we will save the data and clear the form\n\n\n  const submitHandler = event => {\n    // this to ensure that we will handle it here(on the frontend)\n    // otherwise the page will refresh and a request will be sent to the server by default\n    event.preventDefault(); // record the data entered by the user in an object\n    // Now we need to pass this data UP (from child \"ExpenseForm\" to the parent \"NewExpense\")\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate)\n    }; // after recording the entered data, Now we need to pass it up to NewExpense\n\n    props.onSaveExpenseData(expenseData); // to clear the form after submission\n    // empty string will be passed back because wo have two way binding\n\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/stlp/Desktop/Frontend Tutorials/Reat_ExpenseTracker/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","onCancel"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport './ExpenseForm.css';\r\n\r\n// the props here are the funtion that will allow us to pass data up to NewExpense\r\nconst ExpenseForm = (props) => {\r\n\r\n    // we need tree states to record the user input of title, amout, and date\r\n    const [enteredTitle, setEnteredTitle] = useState('');\r\n    const [enteredAmount, setEnteredAmount] = useState('');\r\n    const [enteredDate, setEnteredDate] = useState('');\r\n\r\n    /*\r\n    // we can also have all three inputs as one state with three values\r\n    const [userInput, setUserInput] = useState(\r\n        {\r\n            enteredTitle: '',\r\n            enteredAmount: '',\r\n            enteredDate: '',\r\n        }\r\n    );\r\n    */\r\n\r\n    // we also need three hadlers for the tree states we have\r\n    // sice this handler will be called from the onChange, then onChange will make sure to pass in the event\r\n    // the event will have the value of input the user will enter(event.target.value).\r\n    const titleChangeHandler = (event) => {\r\n        setEnteredTitle(event.target.value); // this if we decide to have three separate states \r\n        /*\r\n        // in case yoy are combining the three inputs in one state\r\n        setUserInput({\r\n            ...userInput, // first we copy the old state to make sure the amount and date are not lost\r\n            enteredTitle: event.target.value\r\n        });\r\n\r\n        // a better way of doing this\r\n        setUserInput((prevState) => {\r\n            return {...prevState, enteredTitle: event.target.value};\r\n        });\r\n        */\r\n    }\r\n\r\n\r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount(event.target.value);\r\n    }\r\n\r\n\r\n    const dateChangeHandler = (event) => {\r\n        setEnteredDate(event.target.value);\r\n    }\r\n\r\n    // to handle when the user submit the form\r\n    // we will save the data and clear the form\r\n    const submitHandler = (event) => {\r\n        // this to ensure that we will handle it here(on the frontend)\r\n        // otherwise the page will refresh and a request will be sent to the server by default\r\n        event.preventDefault(); \r\n\r\n        // record the data entered by the user in an object\r\n        // Now we need to pass this data UP (from child \"ExpenseForm\" to the parent \"NewExpense\")\r\n        const expenseData = {\r\n            title: enteredTitle,\r\n            amount: +enteredAmount,\r\n            date: new Date(enteredDate)\r\n        };\r\n\r\n        // after recording the entered data, Now we need to pass it up to NewExpense\r\n        props.onSaveExpenseData(expenseData);\r\n\r\n        // to clear the form after submission\r\n        // empty string will be passed back because wo have two way binding\r\n        setEnteredTitle(\"\");\r\n        setEnteredAmount(\"\");\r\n        setEnteredDate(\"\");\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"new-expense__controls\">\r\n                <div className=\"new-expense__control\">\r\n                    <label>Title</label>\r\n                    {/* we pass the enteredTitle bake to the value to do TWO WAY BINDING this allows us to \r\n                    get data from user and then change it */}\r\n                    <input type='text' value={enteredTitle} onChange={titleChangeHandler} /> \r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label>Amount</label>\r\n                    <input type='number' min=\"0.01\" step=\"0.01\" value={enteredAmount} onChange={amountChangeHandler} />\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label>Date</label>\r\n                    <input type='date' min=\"2019-01-01\" max=\"2022-12-31\" value={enteredDate} onChange={dateChangeHandler} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"new-expense__actions\">\r\n                <button type=\"button\" onClick={props.onCancel}>Cancel</button>\r\n                <button type=\"submit\">Add Expense</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ExpenseForm;"]},"metadata":{},"sourceType":"module"}